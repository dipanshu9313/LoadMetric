[{"C:\\Users\\MAQ\\Desktop\\Metric Load Time\\react-electron-main\\src\\index.js":"1","C:\\Users\\MAQ\\Desktop\\Metric Load Time\\react-electron-main\\src\\App.js":"2","C:\\Users\\MAQ\\Desktop\\Metric Load Time\\react-electron-main\\src\\Components\\Spinner.js":"3","C:\\Users\\MAQ\\Desktop\\Metric Load Time\\react-electron-main\\src\\Components\\InputScreen.js":"4","C:\\Users\\MAQ\\Desktop\\Metric Load Time\\react-electron-main\\src\\Components\\TableComponent.js":"5","C:\\Users\\MAQ\\Desktop\\Metric Load Time\\react-electron-main\\src\\Components\\demo.js":"6","C:\\Users\\MAQ\\Desktop\\Metric Load Time\\react-electron-main\\src\\Components\\DimensionDropdown.js":"7","C:\\Users\\MAQ\\Desktop\\Metric Load Time\\react-electron-main\\src\\Components\\MeasureDropdown.js":"8","C:\\Users\\MAQ\\Desktop\\Metric Load Time\\react-electron-main\\src\\Components\\VisualDropdown.js":"9","C:\\Users\\MAQ\\Desktop\\Metric Load Time\\react-electron-main\\src\\Components\\TableRow.js":"10"},{"size":263,"mtime":1685701645758,"results":"11","hashOfConfig":"12"},{"size":1574,"mtime":1687159524250,"results":"13","hashOfConfig":"12"},{"size":226,"mtime":1684388797708,"results":"14","hashOfConfig":"12"},{"size":4487,"mtime":1684987603929,"results":"15","hashOfConfig":"12"},{"size":12932,"mtime":1687239328715,"results":"16","hashOfConfig":"12"},{"size":13318,"mtime":1687238900257,"results":"17","hashOfConfig":"12"},{"size":2299,"mtime":1684914942578,"results":"18","hashOfConfig":"12"},{"size":2299,"mtime":1684914946612,"results":"19","hashOfConfig":"12"},{"size":2508,"mtime":1684924378577,"results":"20","hashOfConfig":"12"},{"size":2349,"mtime":1687237494809,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4ftqy3",{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},"C:\\Users\\MAQ\\Desktop\\Metric Load Time\\react-electron-main\\src\\index.js",[],"C:\\Users\\MAQ\\Desktop\\Metric Load Time\\react-electron-main\\src\\App.js",[],"C:\\Users\\MAQ\\Desktop\\Metric Load Time\\react-electron-main\\src\\Components\\Spinner.js",[],"C:\\Users\\MAQ\\Desktop\\Metric Load Time\\react-electron-main\\src\\Components\\InputScreen.js",[],"C:\\Users\\MAQ\\Desktop\\Metric Load Time\\react-electron-main\\src\\Components\\TableComponent.js",["45","46","47","48"],"import React, { useEffect, useState } from 'react'\r\nimport EnhancedTable from './demo'\r\nimport MeasureDropdown from './MeasureDropdown'\r\nimport VisualDropdown from './VisualDropdown'\r\nimport DimensionDropdown from './DimensionDropdown'\r\nimport { Button, IconButton, Popover, Typography } from '@mui/material'\r\nimport FilterListIcon from '@mui/icons-material/FilterList'\r\n\r\nconst TableComponent = ({ response, formData }) => {\r\n  // const [measureList, setMeasureList] = useState(\r\n  //   [...new Set(response.result.map((entry) => entry.Measure))]\r\n  // );\r\n  // const [dimensionList, setDimensionList] = useState(\r\n  //   [...new Set(response.result.map((entry) => entry.DimensionName))]\r\n  // );\r\n  // const [visualList, setVisualList] = useState(\r\n  //   [...new Set(response.result.map((entry) => entry.VisualName))]\r\n  //   );\r\n\r\n  const [data, setData] = useState(response.result)\r\n\r\n  // const [filteredData, setFilteredData] = useState([]);\r\n  // const [MeasureName, setMeasureName] = useState(\"\");\r\n\r\n  // const handleMeasureSelect = (e) => {\r\n  //   setMeasureName(e);\r\n  //   setFilteredData(filteredData.filter((row) => row.Measure === e));\r\n  // };\r\n\r\n  // const [visualName, setVisualName] = useState(\"\");\r\n  // const handleVisualSelect = (e) => {\r\n  //   const filtered = filteredData.filter((item) => visualName.includes(item.data));\r\n  //   setFilteredData(filtered);\r\n  // };\r\n\r\n  // const [DimensionName, setDimensionName] = useState(\"\");\r\n  // const handleDimensionSelect = (e) => {\r\n  //   setDimensionName(e);\r\n  //   setFilteredData(filteredData.filter((row) => row.DimensionName === e));\r\n  // };\r\n\r\n  const [selectedMeasure, setSelectedMeasure] = useState('')\r\n  const [selectedDimension, setSelectedDimension] = useState('')\r\n  const [selectedReport, setSelectedReport] = useState('')\r\n  const [selectedVisual, setSelectedVisual] = useState('')\r\n  const [selectedPage, setSelectedPage] = useState('')\r\n  const [filteredData, setFilteredData] = useState(data)\r\n\r\n  const measures = [...new Set(response.result.map(item => item.Measure))]\r\n  const dimensions = [\r\n    ...new Set(response.result.map(item => item.DimensionName))\r\n  ]\r\n  const reports = [...new Set(response.result.map(item => item.ReportName))]\r\n  const visuals = [...new Set(response.result.map(item => item.VisualName))]\r\n  const pages = [...new Set(response.result.map(item => item.PageName))]\r\n\r\n  const [anchorEl, setAnchorEl] = React.useState(null)\r\n\r\n  const handleClick = event => {\r\n    setAnchorEl(event.currentTarget)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null)\r\n  }\r\n\r\n  const open = Boolean(anchorEl)\r\n  const id = open ? 'simple-popover' : undefined\r\n\r\n  const [\r\n    filterIsMeasureUsedInVisualCheckboxFlag,\r\n    setFilterIsMeasureUsedInVisualCheckboxFlag\r\n  ] = useState(false)\r\n\r\n  const [filterdimensionCheckboxFlag, setFilterdimensionCheckboxFlag] =\r\n    useState(false)\r\n\r\n  function filterTableData(\r\n    measure,\r\n    dimension,\r\n    report,\r\n    visual,\r\n    page,\r\n    filterIsMeasureUsedInVisualCheckboxFlag,\r\n    filterdimensionCheckboxFlag\r\n  ) {\r\n    const filtered = data.filter(item => {\r\n      return (\r\n        (measure === '' || item.Measure === measure) &&\r\n        (dimension === '' || item.DimensionName === dimension) &&\r\n        (report === '' || item.ReportName === report) &&\r\n        (visual === '' || item.VisualName === visual) &&\r\n        (page === '' || item.PageName === page) &&\r\n        (!filterIsMeasureUsedInVisualCheckboxFlag\r\n          ? item.isMeasureUsedInVisual === '1'\r\n          : true) \r\n      )\r\n    })\r\n    setFilteredData(filtered)\r\n  }\r\n  const handleIsMeasureUsedInVisualCheckboxChange = event => {\r\n    setFilterIsMeasureUsedInVisualCheckboxFlag(event.target.checked)\r\n    filterTableData(\r\n      selectedMeasure,\r\n      selectedDimension,\r\n      selectedReport,\r\n      selectedVisual,\r\n      selectedPage,\r\n      filterIsMeasureUsedInVisualCheckboxFlag,\r\n      filterdimensionCheckboxFlag\r\n    )\r\n  }\r\n\r\n  const handledimensionCheckboxChange = event => {\r\n    setFilterdimensionCheckboxFlag(event.target.checked)\r\n    // filterTableData(\r\n    //   selectedMeasure,\r\n    //   selectedDimension,\r\n    //   selectedReport,\r\n    //   selectedVisual,\r\n    //   selectedPage,\r\n    //   filterIsMeasureUsedInVisualCheckboxFlag,\r\n    //   filterdimensionCheckboxFlag\r\n    // )\r\n\r\n    setFilteredData(data.filter(item => {\r\n      return (\r\n        (!filterdimensionCheckboxFlag ? item.hasDimension === \"1\" : true)\r\n      )\r\n    }))\r\n  }\r\n\r\n  function handleMeasureChange(event) {\r\n    setSelectedMeasure(event.target.value)\r\n    filterTableData(\r\n      event.target.value,\r\n      selectedDimension,\r\n      selectedReport,\r\n      selectedVisual,\r\n      selectedPage,\r\n      filterIsMeasureUsedInVisualCheckboxFlag,\r\n      filterdimensionCheckboxFlag\r\n    )\r\n  }\r\n\r\n  function handleDimensionChange(event) {\r\n    setSelectedDimension(event.target.value)\r\n    filterTableData(\r\n      selectedMeasure,\r\n      event.target.value,\r\n      selectedReport,\r\n      selectedVisual,\r\n      selectedPage,\r\n      filterIsMeasureUsedInVisualCheckboxFlag,\r\n      filterdimensionCheckboxFlag\r\n    )\r\n  }\r\n\r\n  function handleReportChange(event) {\r\n    setSelectedReport(event.target.value)\r\n    filterTableData(\r\n      selectedMeasure,\r\n      selectedDimension,\r\n      event.target.value,\r\n      selectedVisual,\r\n      selectedPage,\r\n      filterIsMeasureUsedInVisualCheckboxFlag,\r\n      filterdimensionCheckboxFlag\r\n    )\r\n  }\r\n\r\n  function handleVisualChange(event) {\r\n    setSelectedVisual(event.target.value)\r\n    filterTableData(\r\n      selectedMeasure,\r\n      selectedDimension,\r\n      selectedReport,\r\n      event.target.value,\r\n      selectedPage,\r\n      filterIsMeasureUsedInVisualCheckboxFlag,\r\n      filterdimensionCheckboxFlag\r\n    )\r\n  }\r\n\r\n  function handlePageChange(event) {\r\n    setSelectedPage(event.target.value)\r\n    filterTableData(\r\n      selectedMeasure,\r\n      selectedDimension,\r\n      selectedReport,\r\n      selectedVisual,\r\n      event.target.value,\r\n      filterIsMeasureUsedInVisualCheckboxFlag,\r\n      filterdimensionCheckboxFlag\r\n    )\r\n  }\r\n\r\n  function makeAPICall(url, requestBody) {\r\n    return fetch(url, {\r\n      method: 'POST',\r\n      body: JSON.stringify(requestBody),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setData(JSON.parse(data).result)\r\n        console.log(JSON.parse(data).result)\r\n      })\r\n      .catch(error => {\r\n        console.error('API Error:', error)\r\n        throw error\r\n      })\r\n  }\r\n\r\n  // Function to make multiple API calls concurrently in batches\r\n  const apiUrl = 'http://127.0.0.1:3002/firequery'\r\n\r\n  const requestbody = {\r\n    result: response.result,\r\n    connection_string: response.connection_string,\r\n    threshold_time: formData.thresholdValue\r\n  }\r\n\r\n  useEffect(() => {\r\n    makeAPICall(apiUrl, requestbody)\r\n  }, [])\r\n\r\n  return (\r\n    <div class=\"mt-5\">\r\n      <div class=\"dropdowns p-10\">\r\n        {/* <div class=\"dropdown px-5 \">\r\n           <select value={filter.value} onChange={handleFilterChange}>\r\n            {\r\n              visualList.map((ele) =>{\r\n                return(\r\n                  <option value ={ele}>\r\n                    {ele}\r\n                  </option>\r\n                )\r\n              })\r\n            }\r\n          </select>\r\n        </div>\r\n        <div class=\"dropdown px-5\">\r\n            <MeasureDropdown\r\n              names={measureList}\r\n              handleMeasureSelect={handleMeasureSelect}\r\n            />\r\n        </div>\r\n        <div class=\"dropdown px-5\">\r\n          <DimensionDropdown\r\n            names={dimensionList}\r\n            handleDimensionSelect={handleDimensionSelect}\r\n          />\r\n        </div> */}\r\n        <select\r\n          value={selectedMeasure}\r\n          onChange={handleMeasureChange}\r\n          className=\"mx-2\"\r\n        >\r\n          <option value=\"\">Measures</option>\r\n          {measures.map((measure, index) => (\r\n            <option key={index} value={measure}>\r\n              {measure}\r\n            </option>\r\n          ))}\r\n        </select>\r\n\r\n        <select\r\n          value={selectedDimension}\r\n          onChange={handleDimensionChange}\r\n          className=\"mx-2\"\r\n        >\r\n          <option value=\"\">Dimensions</option>\r\n          {dimensions.map((dimension, index) => (\r\n            <option key={index} value={dimension}>\r\n              {dimension}\r\n            </option>\r\n          ))}\r\n        </select>\r\n\r\n        <select\r\n          value={selectedReport}\r\n          onChange={handleReportChange}\r\n          className=\"mx-2\"\r\n        >\r\n          <option value=\"\">Reports</option>\r\n          {reports.map((report, index) => (\r\n            <option key={index} value={report}>\r\n              {report}\r\n            </option>\r\n          ))}\r\n        </select>\r\n\r\n        <select\r\n          value={selectedPage}\r\n          onChange={handlePageChange}\r\n          className=\"mx-2\"\r\n        >\r\n          <option value=\"\">Pages</option>\r\n          {pages.map((page, index) => (\r\n            <option key={index} value={page}>\r\n              {page}\r\n            </option>\r\n          ))}\r\n        </select>\r\n\r\n        <select\r\n          value={selectedVisual}\r\n          onChange={handleVisualChange}\r\n          className=\"mx-2\"\r\n        >\r\n          <option value=\"\">Visuals</option>\r\n          {visuals.map((visual, index) => (\r\n            <option key={index} value={visual}>\r\n              {visual}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        <Button\r\n          aria-describedby={id}\r\n          variant=\"contained\"\r\n          onClick={handleClick}\r\n          className=\"mx-2\"\r\n        >\r\n          <IconButton>\r\n            <FilterListIcon />\r\n          </IconButton>\r\n        </Button>\r\n        <Popover\r\n          id={id}\r\n          style={{ display: 'flex', flexDirection: 'row' }}\r\n          open={open}\r\n          anchorEl={anchorEl}\r\n          onClose={handleClose}\r\n          anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'left'\r\n          }}\r\n        >\r\n          <Typography sx={{ p: 2 }}>\r\n            {' '}\r\n            <label>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={filterIsMeasureUsedInVisualCheckboxFlag}\r\n                onChange={handleIsMeasureUsedInVisualCheckboxChange}\r\n              />\r\n              Is Measure Used In Visual\r\n            </label>\r\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n            <label>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={filterdimensionCheckboxFlag}\r\n                onChange={handledimensionCheckboxChange}\r\n              />\r\n              Measure With Dimensions\r\n            </label>\r\n          </Typography>\r\n        </Popover>\r\n      </div>\r\n      <div class=\"cards\">\r\n        <div class=\"carD px-5\">\r\n          <div class=\"card total_measures\">\r\n            <div class=\"card-body\">\r\n              <h3 class=\"card-title mb-auto\">{response.result.length}</h3>\r\n              <h4 class=\"card-text\">\r\n                {' '}\r\n                <b>Total Measure Combination</b>{' '}\r\n              </h4>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"carD px-5\">\r\n          <div class=\"card combinations_below_threshold\">\r\n            <div class=\"card-body\">\r\n              <h3 class=\"card-title mb-auto\">\r\n                {\r\n                  response.result\r\n                    .map(entry => entry.LoadTime)\r\n                    .filter(e => e < formData.thresholdValue).length\r\n                }\r\n              </h3>\r\n              <h4 class=\"card-text\">\r\n                {' '}\r\n                <b>Combinations below threshold</b>{' '}\r\n              </h4>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"carD px-5\">\r\n          <div class=\"card combinations_above_threshold\">\r\n            <div class=\"card-body\">\r\n              <h3 class=\"card-title mb-auto\">\r\n                {\r\n                  response.result\r\n                    .map(entry => entry.LoadTime)\r\n                    .filter(e => e === formData.thresholdValue).length\r\n                }\r\n              </h3>\r\n              <h4 class=\"card-text\">\r\n                {' '}\r\n                <b>Combinations above threshold</b>{' '}\r\n              </h4>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"table mt-3\" style={{ overflowY: 'auto', height: '67vh' }}>\r\n        <EnhancedTable\r\n          rows={filteredData}\r\n          thresholdValue={formData.thresholdValue}\r\n          connection_string={response.connection_string}\r\n          filterIsMeasureUsedInVisualCheckboxFlag={filterIsMeasureUsedInVisualCheckboxFlag}\r\n          filterdimensionCheckboxFlag={filterdimensionCheckboxFlag}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TableComponent\r\n","C:\\Users\\MAQ\\Desktop\\Metric Load Time\\react-electron-main\\src\\Components\\demo.js",["49","50","51","52","53"],"import * as React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { alpha } from '@mui/material/styles'\r\nimport Table from '@mui/material/Table'\r\nimport TableBody from '@mui/material/TableBody'\r\nimport TableCell from '@mui/material/TableCell'\r\nimport TableContainer from '@mui/material/TableContainer'\r\nimport TableHead from '@mui/material/TableHead'\r\nimport TablePagination from '@mui/material/TablePagination'\r\nimport TableRow from '@mui/material/TableRow'\r\nimport TableSortLabel from '@mui/material/TableSortLabel'\r\nimport Toolbar from '@mui/material/Toolbar'\r\nimport Typography from '@mui/material/Typography'\r\nimport Paper from '@mui/material/Paper'\r\nimport Checkbox from '@mui/material/Checkbox'\r\nimport IconButton from '@mui/material/IconButton'\r\nimport Tooltip from '@mui/material/Tooltip'\r\nimport FormControlLabel from '@mui/material/FormControlLabel'\r\nimport Switch from '@mui/material/Switch'\r\nimport DeleteIcon from '@mui/icons-material/Delete'\r\nimport FilterListIcon from '@mui/icons-material/FilterList'\r\nimport { visuallyHidden } from '@mui/utils'\r\nimport { json } from 'react-router-dom'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\nimport Box from '@mui/material/Box'\r\nimport Tablerow from './TableRow'\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\n// Since 2020 all major browsers ensure sort stability with Array.prototype.sort().\r\n// stableSort() brings sort stability to non-modern browsers (notably IE11). If you\r\n// only support modern browsers you can replace stableSort(exampleArray, exampleComparator)\r\n// with exampleArray.slice().sort(exampleComparator)\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index])\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0])\r\n    if (order !== 0) {\r\n      return order\r\n    }\r\n    return a[1] - b[1]\r\n  })\r\n  return stabilizedThis.map(el => el[0])\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: 'Measure',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Measure'\r\n  },\r\n  {\r\n    id: 'DimensionName',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'DimensionName'\r\n  },\r\n  {\r\n    id: 'ColumnName',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'ColumnName'\r\n  },\r\n  {\r\n    id: 'LoadTime',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'LoadTime'\r\n  },\r\n  {\r\n    id: 'Report Name',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Report Name'\r\n  },\r\n  {\r\n    id: 'PageName',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'PageName'\r\n  },\r\n  {\r\n    id: 'VisualName',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'VisualName'\r\n  }\r\n]\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n    filterIsMeasureUsedInVisualCheckboxFlag,\r\n    filterdimensionCheckboxFlag\r\n  } = props\r\n  const createSortHandler = property => event => {\r\n    onRequestSort(event, property)\r\n  }\r\n\r\n  const headCells = [\r\n    {\r\n      id: 'Measure',\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: 'Measure'\r\n    },\r\n    ...(filterdimensionCheckboxFlag\r\n      ? [\r\n          {\r\n            id: 'DimensionName',\r\n            numeric: false,\r\n            disablePadding: true,\r\n            label: 'DimensionName'\r\n          },\r\n          {\r\n            id: 'ColumnName',\r\n            numeric: false,\r\n            disablePadding: true,\r\n            label: 'ColumnName'\r\n          }\r\n        ]\r\n      : []),\r\n    {\r\n      id: 'LoadTime',\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: 'LoadTime'\r\n    },\r\n    {\r\n      id: 'ReportName',\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: 'Report Name'\r\n    },\r\n    ...(filterIsMeasureUsedInVisualCheckboxFlag\r\n      ? [\r\n          {\r\n            id: 'PageName',\r\n            numeric: false,\r\n            disablePadding: true,\r\n            label: 'PageName'\r\n          },\r\n          {\r\n            id: 'VisualName',\r\n            numeric: false,\r\n            disablePadding: true,\r\n            label: 'VisualName'\r\n          }\r\n        ]\r\n      : [])\r\n  ];\r\n  \r\n\r\n  \r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            color=\"primary\"\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{\r\n              'aria-label': 'select all desserts'\r\n            }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map(headCell => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? 'right' : 'left'}\r\n            padding={headCell.disablePadding ? 'none' : 'normal'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <Box component=\"span\" sx={visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </Box>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  )\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired\r\n}\r\n\r\nfunction EnhancedTableToolbar(props) {\r\n  const { numSelected } = props\r\n\r\n  return (\r\n    <Toolbar\r\n      sx={{\r\n        pl: { sm: 2 },\r\n        pr: { xs: 1, sm: 1 },\r\n        ...(numSelected > 0 && {\r\n          bgcolor: theme =>\r\n            alpha(\r\n              theme.palette.primary.main,\r\n              theme.palette.action.activatedOpacity\r\n            )\r\n        })\r\n      }}\r\n    >\r\n      {numSelected > 0 ? (\r\n        <Typography\r\n          sx={{ flex: '1 1 100%' }}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\"\r\n        >\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          sx={{ flex: '1 1 100%' }}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\"\r\n        >\r\n          -\r\n        </Typography>\r\n      )}\r\n\r\n      {numSelected > 0 ? (\r\n        <Tooltip title=\"Delete\">\r\n          <IconButton>\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ) : (\r\n        <Tooltip title=\"Filter list\">\r\n          <IconButton>\r\n            <FilterListIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      )}\r\n    </Toolbar>\r\n  )\r\n}\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired\r\n}\r\n\r\nexport default function EnhancedTable({\r\n  rows,\r\n  thresholdValue,\r\n  filterIsMeasureUsedInVisualCheckboxFlag,\r\n  filterdimensionCheckboxFlag\r\n}) {\r\n  // console.log(rows);\r\n\r\n  const [order, setOrder] = React.useState('asc')\r\n  const [orderBy, setOrderBy] = React.useState('calories')\r\n  const [selected, setSelected] = React.useState([])\r\n  const [page, setPage] = React.useState(0)\r\n  const [dense, setDense] = React.useState(false)\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(rows.length)\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc'\r\n    setOrder(isAsc ? 'desc' : 'asc')\r\n    setOrderBy(property)\r\n  }\r\n\r\n  const handleSelectAllClick = event => {\r\n    if (event.target.checked) {\r\n      const newSelected = rows.map(n => n.name)\r\n      setSelected(newSelected)\r\n      return\r\n    }\r\n    setSelected([])\r\n  }\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name)\r\n    let newSelected = []\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name)\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1))\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1))\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      )\r\n    }\r\n\r\n    setSelected(newSelected)\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage)\r\n  }\r\n\r\n  const handleChangeRowsPerPage = event => {\r\n    setRowsPerPage(parseInt(event.target.value, 10))\r\n    setPage(0)\r\n  }\r\n\r\n  const handleChangeDense = event => {\r\n    setDense(event.target.checked)\r\n  }\r\n\r\n  const isSelected = name => selected.indexOf(name) !== -1\r\n\r\n  // Avoid a layout jump when reaching the last page with empty rows.\r\n  const emptyRows =\r\n    page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0\r\n\r\n  const visibleRows = React.useMemo(\r\n    () =>\r\n      stableSort(rows, getComparator(order, orderBy)).slice(\r\n        page * rowsPerPage,\r\n        page * rowsPerPage + rowsPerPage\r\n      ),\r\n    [order, orderBy, page, rowsPerPage, rows.length]\r\n  )\r\n\r\n  return (\r\n    <Box sx={{ width: '100%' }}>\r\n      <Paper sx={{ width: '100%', mb: 2 }}>\r\n        <EnhancedTableToolbar numSelected={selected.length} />\r\n        <TableContainer>\r\n          <Table\r\n            sx={{ minWidth: 750 }}\r\n            aria-labelledby=\"tableTitle\"\r\n            size={dense ? 'small' : 'medium'}\r\n          >\r\n            <EnhancedTableHead\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={rows.length}\r\n              filterIsMeasureUsedInVisualCheckboxFlag={\r\n                filterIsMeasureUsedInVisualCheckboxFlag\r\n              }\r\n              filterdimensionCheckboxFlag={filterdimensionCheckboxFlag}\r\n            />\r\n            <TableBody>\r\n              {rows.map((row, index) => {\r\n                const isItemSelected = isSelected(row.name)\r\n                const labelId = `enhanced-table-checkbox-${index}`\r\n\r\n                // const body = {\r\n                //   ...row,\r\n                //   connection_string: connection_string,\r\n                //   threshold_time: thresholdValue,\r\n                // }\r\n\r\n                // const [loadtime, setLoadtime] = React.useState(0);\r\n                // setTimeout(() => {\r\n                //   fetch(\"http://192.168.2.251:5000/firequery\", {\r\n                //     method: \"POST\",\r\n                //     body: JSON.stringify(body),\r\n                //     headers: {\r\n                //       \"Content-Type\": \"application/json\",\r\n                //     },\r\n                //   })\r\n                //     .then((response) => response.json())\r\n                //     .then((data) => {\r\n                //       // console.log(data)\r\n                //       setLoadtime(JSON.parse(data).result);\r\n                //     })\r\n                //     .catch((error) => {\r\n                //       setLoadtime(\"dsfasd\")\r\n                //       console.log(\"Error:\", error);\r\n\r\n                //     });\r\n                // }, 5000);\r\n                // console.log(\"loadtime\")\r\n                return (\r\n                  <Tablerow\r\n                    row={row}\r\n                    handleClick={handleClick}\r\n                    isItemSelected={isItemSelected}\r\n                    labelId={labelId}\r\n                    thresholdValue={thresholdValue}\r\n                    filterIsMeasureUsedInVisualCheckboxFlag={\r\n                      filterIsMeasureUsedInVisualCheckboxFlag\r\n                    }\r\n                    filterdimensionCheckboxFlag={filterdimensionCheckboxFlag}\r\n                  />\r\n                )\r\n              })}\r\n              {emptyRows > 0 && (\r\n                <TableRow\r\n                  style={{\r\n                    height: (dense ? 33 : 53) * emptyRows\r\n                  }}\r\n                >\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[rows.length / 4, rows.length / 2, rows.length]}\r\n          component=\"div\"\r\n          count={rows.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      <FormControlLabel\r\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n        label=\"Dense padding\"\r\n      />\r\n    </Box>\r\n  )\r\n}\r\n","C:\\Users\\MAQ\\Desktop\\Metric Load Time\\react-electron-main\\src\\Components\\DimensionDropdown.js",[],"C:\\Users\\MAQ\\Desktop\\Metric Load Time\\react-electron-main\\src\\Components\\MeasureDropdown.js",[],"C:\\Users\\MAQ\\Desktop\\Metric Load Time\\react-electron-main\\src\\Components\\VisualDropdown.js",[],"C:\\Users\\MAQ\\Desktop\\Metric Load Time\\react-electron-main\\src\\Components\\TableRow.js",["54","55"],"import * as React from 'react'\r\nimport TableCell from '@mui/material/TableCell'\r\nimport TableRow from '@mui/material/TableRow'\r\nimport Checkbox from '@mui/material/Checkbox'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\nimport Box from '@mui/material/Box'\r\n\r\nconst Tablerow = ({\r\n  row,\r\n  handleClick,\r\n  isItemSelected,\r\n  labelId,\r\n  thresholdValue,\r\n  filterIsMeasureUsedInVisualCheckboxFlag,\r\n  filterdimensionCheckboxFlag\r\n}) => {\r\n  return (\r\n    <TableRow\r\n      hover\r\n      onClick={event => handleClick(event, row.name)}\r\n      role=\"checkbox\"\r\n      aria-checked={isItemSelected}\r\n      tabIndex={-1}\r\n      key={row.name}\r\n      selected={isItemSelected}\r\n      sx={{ cursor: 'pointer' }}\r\n    >\r\n      <TableCell padding=\"checkbox\">\r\n        <Checkbox\r\n          color=\"primary\"\r\n          checked={isItemSelected}\r\n          inputProps={{\r\n            'aria-labelledby': labelId\r\n          }}\r\n        />\r\n      </TableCell>\r\n      <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n        {row.Measure}\r\n      </TableCell>\r\n\r\n      {filterdimensionCheckboxFlag ? (\r\n        <TableCell align=\"left\">{row.DimensionName}</TableCell>\r\n      ) : (\r\n        null\r\n      )}\r\n      {filterdimensionCheckboxFlag ? (\r\n        <TableCell align=\"left\">{row.ColumnName}</TableCell>\r\n      ) : (\r\n        null\r\n      )}\r\n      <TableCell\r\n        align=\"left\"\r\n        style={{\r\n          backgroundColor:\r\n            row.LoadTime == thresholdValue ? 'red' : 'transparent'\r\n        }}\r\n      >\r\n        {row.LoadTime != 0 ? (\r\n          // Display the response data instead of the button\r\n          <span>{row.LoadTime}</span>\r\n        ) : (\r\n          // Show the button if no response data\r\n          <Box sx={{ display: 'flex' }}>\r\n            <CircularProgress />\r\n          </Box>\r\n        )}\r\n      </TableCell>\r\n      {/* <TableCell align=\"left\">{row.isMeasureUsedInVisual}</TableCell> */}\r\n      <TableCell align=\"left\">{row.ReportName}</TableCell>\r\n      {filterIsMeasureUsedInVisualCheckboxFlag ? (\r\n        <TableCell align=\"left\">{row.PageName}</TableCell>\r\n      ) : (\r\n        null\r\n      )}\r\n      {filterIsMeasureUsedInVisualCheckboxFlag ? (\r\n        <TableCell align=\"left\">{row.VisualName}</TableCell>\r\n      ) : (\r\n        null\r\n      )}\r\n    </TableRow>\r\n  )\r\n}\r\n\r\nexport default Tablerow\r\n",{"ruleId":"56","severity":1,"message":"57","line":3,"column":8,"nodeType":"58","messageId":"59","endLine":3,"endColumn":23},{"ruleId":"56","severity":1,"message":"60","line":4,"column":8,"nodeType":"58","messageId":"59","endLine":4,"endColumn":22},{"ruleId":"56","severity":1,"message":"61","line":5,"column":8,"nodeType":"58","messageId":"59","endLine":5,"endColumn":25},{"ruleId":"62","severity":1,"message":"63","line":228,"column":6,"nodeType":"64","endLine":228,"endColumn":8,"suggestions":"65"},{"ruleId":"56","severity":1,"message":"66","line":23,"column":10,"nodeType":"58","messageId":"59","endLine":23,"endColumn":14},{"ruleId":"56","severity":1,"message":"67","line":24,"column":8,"nodeType":"58","messageId":"59","endLine":24,"endColumn":24},{"ruleId":"56","severity":1,"message":"68","line":60,"column":7,"nodeType":"58","messageId":"59","endLine":60,"endColumn":16},{"ruleId":"56","severity":1,"message":"69","line":351,"column":9,"nodeType":"58","messageId":"59","endLine":351,"endColumn":20},{"ruleId":"62","severity":1,"message":"70","line":357,"column":5,"nodeType":"64","endLine":357,"endColumn":53,"suggestions":"71"},{"ruleId":"72","severity":1,"message":"73","line":55,"column":26,"nodeType":"74","messageId":"75","endLine":55,"endColumn":28},{"ruleId":"72","severity":1,"message":"76","line":58,"column":23,"nodeType":"74","messageId":"75","endLine":58,"endColumn":25},"no-unused-vars","'MeasureDropdown' is defined but never used.","Identifier","unusedVar","'VisualDropdown' is defined but never used.","'DimensionDropdown' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'requestbody'. Either include it or remove the dependency array.","ArrayExpression",["77"],"'json' is defined but never used.","'CircularProgress' is defined but never used.","'headCells' is assigned a value but never used.","'visibleRows' is assigned a value but never used.","React Hook React.useMemo has a missing dependency: 'rows'. Either include it or remove the dependency array.",["78"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.",{"desc":"79","fix":"80"},{"desc":"81","fix":"82"},"Update the dependencies array to be: [requestbody]",{"range":"83","text":"84"},"Update the dependencies array to be: [rows, order, orderBy, page, rowsPerPage]",{"range":"85","text":"86"},[6946,6948],"[requestbody]",[9674,9722],"[rows, order, orderBy, page, rowsPerPage]"]